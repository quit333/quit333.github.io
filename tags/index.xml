<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
	<title>— QUIT3 —</title>
	<link>http://localhost:1313/tags/</link>
	<description>Recent content in Tags on — QUIT3 —</description>
	<generator>Hugo -- gohugo.io</generator>
	<language>en-US</language>
    
        <atom:link href="http://localhost:1313/tags/index.xml" rel="self" type="application/rss+xml" />
	
	
	<item>
		<title>Aesthetics</title>
		<link>http://localhost:1313/aesthetics/</link>
		<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
		
		<guid>http://localhost:1313/aesthetics/</guid>
		<description>&lt;div class=&#34;gallery&#34; id=&#34;gallery&#34;&gt;
&lt;/div&gt;
&lt;script&gt;
let page = 0;
let imageList = [];

window.addEventListener(&#34;load&#34;, () =&gt; {
    const article = document.querySelector(&#34;article&#34;);
    const gallery = document.getElementById(&#34;gallery&#34;);

    fetch(&#34;../aesthetics/links.json&#34;).then(res =&gt; res.json()).then(data =&gt; {
            imageList = data;
            onFetchedImages();
    });

    function fillGaps() {
        const items = gallery.querySelectorAll(&#39;.gallery-item&#39;);
        const gridComputedStyle = window.getComputedStyle(gallery);
        const rowGap = parseInt(gridComputedStyle.rowGap);
        
        items.forEach(item =&gt; {
            const img = item.querySelector(&#39;img&#39;);
            if (!img.complete) return;
            
            const itemHeight = img.offsetHeight;
            const gridRowHeight = rowGap; // Small grid row size
            const rowSpan = Math.ceil(itemHeight / gridRowHeight);
            
            item.style.gridRowEnd = `span ${rowSpan}`;
        });
    }

    function addMoreImages(){
        const start = page * 5;
        const end = start + 5
        const currentImages = imageList.slice(start, end);

        currentImages.forEach(imgData =&gt; {
            const img = document.createElement(&#34;img&#34;);
            img.src = `${imgData.thumb}`;

            const link = document.createElement(&#34;a&#34;);
            link.href = `${imgData.full}`;
            link.target = &#34;_blank&#34;;
            link.rel = &#34;noopener noreferrer&#34;; 
            link.appendChild(img);


            const item = document.createElement(&#34;div&#34;);
            item.className = &#34;gallery-item&#34;;
            item.appendChild(img);

            img.onload = () =&gt; {
                fillGaps();
            };
            
            gallery.appendChild(item);
        });
        page++;
    }

    function onFetchedImages(){
        if (article.scrollHeight &lt;= article.clientHeight + 500) {
            addMoreImages();
            setTimeout(onFetchedImages, 100);
        }
    }

    article.addEventListener(&#39;scroll&#39;, () =&gt; {
        if (article.scrollTop &gt;= article.scrollHeight - article.clientHeight) {
            addMoreImages();
        }
    });

    window.addEventListener(&#39;resize&#39;, () =&gt; {
        fillGaps();
    });
});
&lt;/script&gt;
</description>
	</item>
	
	</channel>
</rss>
