<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
	<title>— QUIT3 —</title>
	<link>https://quit333.github.io/</link>
	<description>Recent content in Home on — QUIT3 —</description>
	<generator>Hugo -- gohugo.io</generator>
	<language>en-US</language>
	<lastBuildDate>Sun, 01 Jan 2023 08:00:00 -0700</lastBuildDate>
    
        <atom:link href="https://quit333.github.io/index.xml" rel="self" type="application/rss+xml" />
	
	
	<item>
		<title>Aesthetics</title>
		<link>https://quit333.github.io/aesthetics/</link>
		<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
		
		<guid>https://quit333.github.io/aesthetics/</guid>
		<description>&lt;div class=&#34;gallery&#34; id=&#34;gallery&#34;&gt;&lt;/div&gt;
&lt;script&gt;
window.addEventListener(&#34;load&#34;, () =&gt; {
    // Constants.
    const article = document.querySelector(&#34;article&#34;);
    const gallery = document.getElementById(&#34;gallery&#34;);

    // Variables.
    let page = 0;
    let mediaList = [];
    let gridComputedStyle = window.getComputedStyle(gallery);
    let rowGap = parseInt(gridComputedStyle.rowGap);
    let columnGap = parseInt(gridComputedStyle.columnGap);
   
    // Calls onStart function after loading gallery&#39;s media index.
    fetch(&#34;../aesthetics/media.json&#34;).then(res =&gt; res.json()).then(data =&gt; {
            mediaList = data;
            onStart();
    });

    // On start.
    function onStart(){
        // Adds more media until overflow enables scrolling.
        if (article.scrollHeight &lt;= article.clientHeight + 200){
            addMoreMedia();
            setTimeout(onStart, 100);
        }
    }

    // Handles how different types of media are loaded.
    function addMoreMedia(){
        const start = page * 5;
        const end = start + 5
        const currentMedia = mediaList.slice(start, end);

        currentMedia.forEach(mediaItem =&gt; {
            if ([&#34;.jpg&#34;, &#34;.jpeg&#34;, &#34;.png&#34;, &#34;.webp&#34;].some(ext =&gt; mediaItem.toLowerCase().endsWith(ext))){
                const img = document.createElement(&#34;img&#34;);
                const imgName = mediaItem;
                const imgBaseName = `${imgName.split(&#39;.&#39;).slice(0, -1)}`;
                img.src = `https://raw.githubusercontent.com/quit333/quit3-backup/refs/heads/master/aesthetics/thumbnails/${imgBaseName}.webp`

                const link = document.createElement(&#34;a&#34;);
                link.href = `https://raw.githubusercontent.com/quit333/quit3-backup/refs/heads/master/aesthetics/images/${imgName}` 
                link.target = &#34;_blank&#34;;
                link.rel = &#34;noopener noreferrer&#34;; 
                link.appendChild(img);

                img.addEventListener(&#34;load&#34;, () =&gt; createGalleryItem(link)) 
            }
            else if (mediaItem.toLowerCase().endsWith(&#34;.gif&#34;)){
                const img = document.createElement(&#34;img&#34;);
                img.src = `https://raw.githubusercontent.com/quit333/quit3-backup/refs/heads/master/aesthetics/videos/${mediaItem}`

                const link = document.createElement(&#34;a&#34;);
                link.href = `https://raw.githubusercontent.com/quit333/quit3-backup/refs/heads/master/aesthetics/videos/${mediaItem}` 
                link.target = &#34;_blank&#34;;
                link.rel = &#34;noopener noreferrer&#34;; 
                link.appendChild(img);

                img.addEventListener(&#34;load&#34;, () =&gt; createGalleryItem(link)) 
            }
        else if ( mediaItem.toLowerCase().startsWith(&#34;http&#34;) || [&#34;mp4&#34;, &#34;webm&#34;].some(ext =&gt; mediaItem.toLowerCase().endsWith(ext))
        ){
            const video = document.createElement(&#34;video&#34;);
            video.autoplay = true;
            video.loop = true;
            video.muted = true;

            const isDirectUrl = mediaItem.toLowerCase().startsWith(&#34;http&#34;);
            const src = isDirectUrl
                ? mediaItem
                : `https://raw.githubusercontent.com/quit333/quit3-backup/refs/heads/master/aesthetics/videos/${mediaItem}`;

            const source = document.createElement(&#34;source&#34;);
            source.src = src;
            video.appendChild(source);

            const link = document.createElement(&#34;a&#34;);
            link.href = src;
            link.target = &#34;_blank&#34;;
            link.rel = &#34;noopener noreferrer&#34;;
            link.appendChild(video);

            video.addEventListener(&#34;loadeddata&#34;, () =&gt; createGalleryItem(link));
            }
        });
        page++;
    }

    // Creates a gallery and sets its height.
    function createGalleryItem(media){
        const item = document.createElement(&#34;div&#34;);
        item.className = &#34;gallery-item&#34;;
        item.appendChild(media);
        gallery.appendChild(item);
        setItemHeight(item);
    }

    // Sets the item&#39;s height accordingly to the current gallery size.
    function setItemHeight(item){
        const media = item.querySelector(&#39;img, video&#39;);

        // Stops the height calculation if the media hasn&#39;t loaded completely. 
        if (!media) return;
        if (media.tagName === &#34;IMG&#34; &amp;&amp; !media.complete) return;
        if (media.tagName === &#34;VIDEO&#34; &amp;&amp; media.readyState &lt; 3) return;
        
        // Calculates the height in terms of column-gap-sized row spans.
        const itemHeight = media.clientHeight;
        const gridRowHeight = columnGap;
        const rowSpan = Math.round(itemHeight / gridRowHeight);
        
        item.style.gridRowEnd = `span ${rowSpan}`;
    }

    // Adds more media once you scroll to the bottom.
    article.addEventListener(&#39;scroll&#39;, () =&gt; {
        if (article.scrollTop &gt;= article.scrollHeight - article.clientHeight - 500) {
            addMoreMedia();
        }
    });

    // Recalculates each item&#39;s height on windows resize.
    window.addEventListener(&#39;resize&#39;, () =&gt; {
        const items = gallery.querySelectorAll(&#39;.gallery-item&#39;);

        // Gallery&#39;s column change responsively.
        gridComputedStyle = window.getComputedStyle(gallery); 
        rowGap = parseInt(gridComputedStyle.rowGap);
        columnGap = parseInt(gridComputedStyle.columnGap);

        items.forEach(item =&gt; {
            setItemHeight(item);
        });
    });
});
&lt;/script&gt;
</description>
	</item>
	
	</channel>
</rss>
